name: Comprehensive TallyIO Validation

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      clear_cache:
        description: 'Clear cached test results'
        default: false
        required: false
        type: boolean
      no_cache:
        description: 'Run without using cached results'
        default: false
        required: false
        type: boolean

jobs:
  format-check:
    name: Code Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt
      
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy-check:
    name: Clippy Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      
      - name: Run Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings -D clippy::pedantic -D clippy::nursery -D clippy::correctness -D clippy::suspicious -D clippy::perf -W clippy::redundant_allocation -W clippy::needless_collect -W clippy::suboptimal_flops -A clippy::missing_docs_in_private_items -D clippy::infinite_loop -D clippy::while_immutable_condition -D clippy::never_loop -D for_loops_over_fallibles -D clippy::manual_strip -D clippy::needless_continue -D clippy::match_same_arms -v

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all --no-fail-fast
        env:
          TALLYIO_FAST_TESTS: 1

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: llvm-tools-preview
      
      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov
      
      - name: Run code coverage
        run: cargo llvm-cov --workspace --lcov --output-path lcov.info
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./lcov.info
          fail_ci_if_error: true

  critical-tests:
    name: Critical Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Run critical tests
        run: |
          # Security tests
          cargo test --workspace --test "*security*" -- --nocapture
          # Economic tests
          cargo test --workspace --test "*economic*" -- --nocapture
          # State consistency tests
          cargo test --workspace --test "*consistency*" -- --nocapture
          # Timing tests
          cargo test --workspace --test "*timing*" -- --nocapture

  stability-tests:
    name: Stability Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Run stability tests
        run: |
          # Endurance tests
          cargo test --workspace --test "*endurance*" -- --nocapture
          # Load stress tests
          cargo test --workspace --test "*stress*" -- --nocapture
          # Resource exhaustion tests
          cargo test --workspace --test "*exhaustion*" -- --nocapture

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Run integration tests
        run: |
          # Run all tests in the tests directory
          cd tests
          for test_dir in */; do
            cd "$test_dir"
            if [ -f "Cargo.toml" ]; then
              cargo test --all-features -- --nocapture
            fi
            cd ..
          done

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Install cargo-criterion
        run: cargo install cargo-criterion
      
      - name: Run benchmarks
        run: cargo criterion --workspace

  doc-tests:
    name: Documentation Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Run doc tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --doc

  forbidden-patterns:
    name: Check Forbidden Patterns
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Check forbidden patterns
        run: |
          echo "Checking for forbidden patterns in Rust code..."
          
          # Check for unwrap/expect calls outside of test code
          ! find crates -name "*.rs" -not -path "*/tests/*" -not -path "*/benches/*" | 
            xargs grep -l ".unwrap()" | 
            grep -v "#\[test\]" | 
            grep -v "#\[cfg(test)\]"
          
          # Check for other forbidden patterns
          ! find crates -name "*.rs" -not -path "*/tests/*" -not -path "*/benches/*" | 
            xargs grep -l ".expect(" | 
            grep -v "#\[test\]" | 
            grep -v "#\[cfg(test)\]"
          
          echo "No forbidden patterns found!"

  report:
    name: Generate Full Report
    needs: [format-check, clippy-check, unit-tests, security-audit, code-coverage, critical-tests, stability-tests, integration-tests, benchmarks, doc-tests, forbidden-patterns]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v3
      
      - name: Generate report
        run: |
          echo "## TallyIO Validation Report" > report.md
          echo "### Test Results" >> report.md
          
          # Add status for each job
          echo "- Format Check: ${{ needs.format-check.result }}" >> report.md
          echo "- Clippy Analysis: ${{ needs.clippy-check.result }}" >> report.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> report.md
          echo "- Security Audit: ${{ needs.security-audit.result }}" >> report.md
          echo "- Code Coverage: ${{ needs.code-coverage.result }}" >> report.md
          echo "- Critical Tests: ${{ needs.critical-tests.result }}" >> report.md
          echo "- Stability Tests: ${{ needs.stability-tests.result }}" >> report.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> report.md
          echo "- Benchmarks: ${{ needs.benchmarks.result }}" >> report.md
          echo "- Doc Tests: ${{ needs.doc-tests.result }}" >> report.md
          echo "- Forbidden Patterns: ${{ needs.forbidden-patterns.result }}" >> report.md
          
          # Add timestamp
          echo "### Generated at" >> report.md
          echo "$(date)" >> report.md
      
      - name: Upload report
        uses: actions/upload-artifact@v3
        with:
          name: validation-report
          path: report.md
